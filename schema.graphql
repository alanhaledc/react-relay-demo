type Message {
  id: ID
  title: String
  content: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type MessageConnection {
  edges: [MessageEdge]
  pageInfo: PageInfo
}

type MessageEdge {
  cursor: String
  node: Message
}

type User {
  userId: String
  id: ID
  messages(
    status: String = "any"
    after: String
    first: Int
    before: String
    last: Int
  ): MessageConnection
}

input MessageInput {
  userId: ID
  id: ID
}

type MessagePayload {
  user: User
  message: Message
}

type Query {
  user(userId: String): User
  message(input: MessageInput): MessagePayload
}

type Mutation {
  addMessage(input: AddMessageInput!): AddMessagePayload
  updateMessage(input: UpdateMessageInput!): UpdateMessagePayload
  removeMessage(input: RemoveMessageInput!): RemoveMessagePayload
}

input AddMessageInput {
  userId: ID
  title: String
  content: String
}

type AddMessagePayload {
  user: User
  messageEdge: MessageEdge
}

input UpdateMessageInput {
  userId: ID
  id: ID
  title: String
  content: String
}

type UpdateMessagePayload {
  user: User
  message: Message
}

input RemoveMessageInput {
  userId: ID
  id: ID
}

type RemoveMessagePayload {
  user: User
  deleteMessageId: ID
}
