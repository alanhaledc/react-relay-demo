type Message {
  id: String
  title: String
  content: String
}

type User {
  userId: String
  messageList: [Message]
}

input MessageInput {
  userId: String
  id: String
}

type MessagePayload {
  user: User
  message: Message
}

type Query {
  user(userId: String): User
  message(input: MessageInput): MessagePayload
}

type Mutation {
  addMessage(input: AddMessageInput): AddMessagePayload
  updateMessage(input: UpdateMessageInput): UpdateMessagePayload
  removeMessage(input: RemoveMessageInput): RemoveMessagePayload
}

input AddMessageInput {
  userId: String
  title: String
  content: String
}

type AddMessagePayload {
  user: User
  message: Message
}

input UpdateMessageInput {
  userId: String
  id: String
  title: String
  content: String
}

type UpdateMessagePayload {
  user: User
  message: Message
}

input RemoveMessageInput {
  userId: String
  id: String
}

type RemoveMessagePayload {
  user: User
  message: Message
}
